/*//this keyword

function greet(username){
    
    return `Hello! ${this.username}`;
}

function greetUser(greet,username){
    return greet(username);
}

console.log(greetUser(greet,'Alice'))

console.log(this)

//apply bind and call

function getName(user){
    return `${user}, ${this.fname} ${this.lname}`;
}

let p = {
    fname:'Manish',
    lname:' kumar'
}

//call
console.log(getName.call(p, 'hey!'))

console.log(getName.apply(p, ['hi']));


const fullname = getName.bind(p,'hello');
console.log(fullname())

*/

const str = /lo/;  // syntex for writing regex is /sdf/

console.log(str.exec('hello world'));
console.log(str.test('hello manish'));



// currying

// function orderPizza(size){
//     return function(topping){
//         return `You ordered the ${size} pizza with ${topping}`;
//     }
// }

// const orderLargePizza=orderPizza('large');
// console.log(orderLargePizza('Pepperoin'));


// function myName(){
//     var x= 5;
//     return x;
// }

// console.log(myName());

 
// scope chain in js

// var y=75;
// function fav(){
//     var x=35;
//     function getfav(){
//         return x;
//     }
    
//     function anothfav(){
//         return y;
//     }
    
//     console.log(getfav());
//     console.log(anothfav());
// }

// fav();


// closure in js

// function randomFunc(){
//     var obj = {
//         name:'Manish',
//         age:22
//     }
    
//     return function(){
//         console.log(obj.name+' is unlucky! ');
//     }
// }


// const main=randomFunc();// returns a function so to store in var first then execute
// main();


// memoization

function memoAddTo256(){
    var char={};
    return function(num){
        if(num in char){
            console.log('Cached value');
            return char[num]
        }
        else{
            char[num]=num+256;
            return char[num];
        }
    }
}

var memoizedFunc=memoAddTo256();
console.log(memoizedFunc(20));
console.log(memoizedFunc(20));



function myapp(a){
    return `number is ${a}`;
}
var a =25;
console.log(myapp(a));

//The spread operator allows you to expand or spread elements of an iterable (like an array or an object) into individual elements. It's commonly used for combining arrays or passing multiple arguments to functions.

const arr1=[2,3,4];
const arr2=[6,7,8];

console.log(...arr1, ...arr2);

// The rest parameter allows you to represent an indefinite number of arguments as an array. It's useful when you want a function to accept any number of arguments

function addNumber(...number){
    return number.reduce((sum,num)=> sum+num, 0);
}

const result=addNumber(1,2,3,4,5);
console.log(result);


//object destructuring
const classDetails = {
  strength: 78,
  benches: 39,
  blackBoard:1
}

const {strength:classStrength, benches:classBenches,blackBoard:classBlackBoard} = classDetails;

console.log(classStrength); // Outputs 78
console.log(classBenches); // Outputs 39
console.log(classBlackBoard); // Outputs 1



// promises
function sumOfThree(... elements){
    return new Promise((resolve, reject)=>{
        if(elements.length > 3){
            reject("Only three elements present..")
        }
        else{
            let sum=0;
            let i=0;
            while(i<elements.length){
                sum+=elements[i];
                i++;
            }
            resolve("Sum is "+sum);
        }
    })
}


sumOfThree(1,2,4)
.then(result=>console.log(result))
.catch(result=>console.log("error"));






// before es6 only constructor function is there

// function Student(name, roll, age){
//     this.name=name;
//     this.roll=roll;
//     this.age=age;
// }

// Student.prototype.getDetails=function(){
//     return `name is ${this.name}, roll number is ${this.roll}, age is ${this.age}`;
// }


// let student=new Student("Anish",2,20);
// console.log(student.getDetails());




// classes in javascript after es6

// class Student{
//     constructor(n, r, a){
//         this.name=n;
//         this.roll=r;
//         this.age=a;
//     }
    
//     getDetails(){
//         return `Name is ${this.name} with roll no is ${this.roll} and age is ${this.age}`;
//     }
// }

// let student=new Student("Manish ", 1, 22);
// console.log(student.getDetails());



// generator function

// function* genFun(){
//     let arr={
//         name:"Manish",
//         age:22
//     };
//     console.log(arr);
//     console.log("hi");
//     yield 3;
//     yield 4;
//     return "hello";
// }

// const gene=genFun();
// console.log(gene);
// console.log(gene.next());
// console.log(gene.next());
// console.log(gene.next());



// fibonacci series+
// function* fibonacci(){
//     let [a,b]=[0,1];
//     while(true){
//         yield a;
//         [a,b]=[b,a+b];
//     }
// }

// const fibo=fibonacci();
// console.log(fibo.next().value);
// console.log(fibo.next().value);
// console.log(fibo.next().value);
// console.log(fibo.next().value);
// console.log(fibo.next().value);
// console.log(fibo.next().done);


// weak set

// const st = new Set([1,1,1,2,3,4]);
// console.log(st);

// const st1=new WeakSet([3,4,5]);
// console.log(st1);// error because it contains only objects

let obj1=[
    {
        name:"Abhishek",
        college:"IIT_MADRAS",
        age: 22
    },
    {
       name:"Anurag",
       college:"LMJPIT",
       age:23
    },
    {
        name:"Manish",
        college:"NIET",
        age:22
    },
    {
        name:"Abhishek",
        college:"IIT_MADRAS",
        age: 22
    }
];

const st1=new WeakSet([obj1]);
console.log(st1);
console.log(st1.has(obj1));


//callbacks

// function fetchUserData(callbacks){
//     setTimeout(()=>{
//         const userData={
//             name:"Manish",
//             age: 22
//         }; 
//         callbacks(userData);
//     },2000)// 2 second delays
// }

// fetchUserData((data)=>{
//     console.log(`user name is ${data.name} and age is ${data.age}`)
// })


// weak map

// let obj={name:"Manish"};
// const map1=new WeakMap();
// map1.set(obj,{age:22});
// console.log(map1);


// object destructing
// before es6

// const classDetails = {
//   strength: 78,
//   benches: 39,
//   blackBoard:1
// }

// const classStrength = classDetails.strength;
// console.log(classStrength);
// const classBenches = classDetails.benches;
// console.log(classBenches);
// const classBlackBoard = classDetails.blackBoard;
// console.log(classBlackBoard);


// after es6;
// const classDetails = {
//   strength: 78,
//   benches: 39,
//   blackboard:1
// }


// const {strength, benches, blackboard}=classDetails;
// console.log(strength);
// console.log(benches);
// console.log(blackboard);


//array destructuring
//before es6
// const arr = [1, 2, 3, 4];
// const first = arr[0];
// const second = arr[1];
// const third = arr[2];
// const fourth = arr[3];


// after es6
// const arr =[1,2,3];
// const [one, two, three]=arr;
// console.log(one);



//valid anagram

var first = "Manish";
var second = "AnishM";

function isAnagram(one, two){
    var a = one.toLowerCase();
    var b = two.toLowerCase();
    
    a=a.split('').sort().join('');
    b=b.split('').sort().join('');
    
    return a==b;
}

console.log(isAnagram(first,second));


